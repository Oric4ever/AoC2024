program Day06
import In,Out
const SIZE  = 130
      UP    = 0
      RIGHT = 1
      DOWN  = 2
      LEFT  = 3
var area : array SIZE,SIZE+1 of char
    dx,dy: array 4 of integer
    flag : array 4 of char
    startX, startY: integer

procedure init
  var line, x : integer
begin
  for line := 0 to SIZE-1 do
    In.Line(area[line])
    for x := 0 to SIZE-1 do
      if area[line][x] = "^" then startX := x ; startY := line end
    end
  end
  area[startY][startX] := "."

  dx[ UP  ] :=  0 ; dy[ UP  ] := -1; flag[ UP  ] := "^"
  dx[RIGHT] := +1 ; dy[RIGHT] :=  0; flag[RIGHT] := ">"
  dx[DOWN ] :=  0 ; dy[DOWN ] := +1; flag[DOWN ] := "v"
  dx[LEFT ] := -1 ; dy[LEFT ] :=  0; flag[LEFT ] := "<"
end init

procedure reset_area
  var x,y : integer
begin
  for y := 0 to SIZE-1 do
    for x := 0 to SIZE-1 do
      if area[y][x] # "#" then area[y][x] := "." end
    end
  end
end reset_area

procedure patrol(var loop: boolean)
begin
  var currentDir := UP
  var x := startX
  var y := startY
  while (x >= 0) and (x < SIZE) and (y >= 0) and (y < SIZE) and (area[y][x] # flag[currentDir]) do
    let nextX = x + dx[currentDir]
    let nextY = y + dy[currentDir]
    if (nextX >= 0) and (nextX < SIZE) and (nextY >= 0) and (nextY < SIZE) and (area[nextY][nextX] = "#") then
      currentDir := (currentDir + 1) mod 4
    else
      area[y][x] := flag[currentDir]
      x := nextX ; y := nextY
    end
  end
  loop := (x >= 0) and (x < SIZE) and (y >= 0) and (y < SIZE) 
end patrol

function count_guard_positions(): integer
  var x,y: integer
begin
  var count := 0
  for y := 0 to SIZE-1 do
    for x := 0 to SIZE-1 do
      if (area[y][x] # "#") and (area[y][x] # ".") then inc(count) end
    end
  end
  return count
end count_guard_positions

function find_all_loops(): integer
  var has_loop  : boolean
      count,x,y : integer
begin
  for y := 0 to SIZE-1 do
    for x := 0 to SIZE-1 do
      reset_area
      if area[y][x] # "#" then
        area[y][x] := "#"
        patrol(has_loop)
        if has_loop then inc(count) end
        area[y][x] := "."
      end
    end
  end
  return count
end find_all_loops

  var does_loop: boolean
begin
  init
  patrol(does_loop)
  assert( not does_loop )
  Out.Int(count_guard_positions()); Out.Ln

  Out.Int(find_all_loops()); Out.Ln
end Day06.
